<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gravity
grav = .4;
//friction
fric = 0.2;
//movement speed
spd = 3;

xvel = 0;
yvel = 0;

up = false;
down = false;
left = false;
right = false;

isGrounded = false;
image_speed = 1/6;

pressed = false;

switch global.door {
    case "":
        break;
    default:
        entrance = instance_find(asset_get_index(global.door), 0);
        x = entrance.x;
        y = entrance.y;
        break;
}

depth = -1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////Eye Controls////
/*
up = dunno?
down = mouse is down
left = mouse is left
right = mouse is right
space = mouse is up
*/

////Normal Controls////
up = keyboard_check_pressed(vk_up);
down = keyboard_check(vk_down);
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);
space = keyboard_check(vk_space);

////Extra Controls////
if keyboard_check(vk_escape) {
    room_goto(mainmenu);
    audio_stop_all();
}

if keyboard_check(ord('B')) {
    room_goto(bioRoom);
}

////Movement////
move = right-left;
if sign(move) != 0 {
    image_xscale = sign(move);
}
xvel = move*spd;

//Terminal Velocity and Gravity
yvel = min(yvel + grav, 30);

//Jumping
if space and isGrounded{
    yvel = -10;
}

////Collisions////
//Vertical//
isGrounded = false;
if place_meeting(x, y + yvel, Foreground) {
    //Move until you hit it
    while not(place_meeting(x, y + sign(yvel)/10, Foreground)) {
        y += sign(yvel)/10;
    }
    
    if (yvel &gt;= 0) {
        isGrounded = true;
    }
    yvel = 0;
}
//For Platforms
platform = instance_place(x, y + yvel, Platform);
if instance_exists(platform) {
    //Checks for platforms
    if not(((platform.y - platform.sprite_height/2) &lt; round(y + sprite_height/2) or down)) {
        //Move until you hit it
        while not(place_meeting(x, y + sign(yvel)/10, Platform)) {
            y += sign(yvel)/10;
        }
        
        isGrounded = true;
        yvel = 0;
    }
        
}
y += yvel;

//Horizontal//
wall = instance_place(x + xvel, y, Foreground);
if instance_exists(wall) {
    //If you're not hitting a ramp
    if place_meeting(x + xvel, y - sprite_height/4, Foreground) {
        //Move until you hit the wall
        while not(place_meeting(x + sign(xvel)/10, y, Foreground)) {
            x += sign(xvel)/10;
        }
        
        xvel = 0;
    //If you are hitting a ramp
    } else {
        //Go up it
        while place_meeting(x + xvel, y, Foreground) {
            y -= 1;
        }
    }
}
x += xvel;

if isGrounded {
    if place_meeting(x, y + sprite_height/4, Foreground) {
        while not(place_meeting(x, y + 1, Foreground)) {
            y += 1;
        }
    }
}
////Interactions////
if up {
    pressed = true;
    interactible = instance_place(x, y, Interactible);
    if instance_exists(interactible) {
        with interactible {
            activate(object_get_name(object_index));
        }
    }
}

//So, for eye controls, this will need some tweaking,
//I don't know how you want to check if they're releasing it
if keyboard_check_released(vk_up) {
    pressed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
