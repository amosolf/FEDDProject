<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gravity
grav = .4;
//friction
fric = 0.2;
//movement speed
spd = 3;

xvel = 0;
yvel = 0;

up = false;
down = false;
left = false;
right = false;

isGrounded = false;
image_speed = 1/6;

pressed = false;

switch global.door {
    case "":
        break;
    default:
        entrance = instance_find(asset_get_index(global.door), 0);
        x = entrance.x;
        y = entrance.y;
        break;
}

depth = -1000;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>////Normal Controls////
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
left = keyboard_check(vk_left);
right = keyboard_check(vk_right);
space = keyboard_check(vk_space);

////Movement////
move = right-left;
xvel = move*spd;

yvel = min(yvel + grav, 30);

ground = instance_place(x, y + 1, Foreground);
if instance_exists(ground) {
    if not((object_get_parent(ground.object_index) = Platform) and ((ground.y - ground.sprite_height/2) &lt; round(y + sprite_height/2) or down)) and yvel &gt;= 0 {
        if space {
            yvel = -10;
        }
    }
}

////Colissions////
if place_meeting(x + xvel, y, Foreground) {
    while !place_meeting(x+sign(xvel), y, Foreground) {
        x += sign(xvel);
    }
    
    xvel = 0;
}
x += xvel;

wall = instance_place(x, y + yvel, Foreground);
if instance_exists(wall) {

    if not((object_get_parent(wall.object_index) = Platform) and ((wall.y - wall.sprite_height/2) &lt; round(y + sprite_height/2) or down)) {
        while !place_meeting(x, y + sign(yvel), Foreground) {
            y += sign(yvel);
        }
        
        yvel = 0;
    }
}
y += yvel;

////Interactions////
if up {
    pressed = true;
    interactible = instance_place(x, y, Interactible);
    if instance_exists(interactible) {
        with interactible {
            activate(object_get_name(object_index));
        }
    }
} else {
    pressed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
