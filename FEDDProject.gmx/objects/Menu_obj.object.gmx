<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSelector</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>menu[0] = "Room One";
menu[1] = "Boss Room";
menu[2] = "Tutorial";
menu[3] = "Settings";
menu[4] = "Exit";

space = 64;
mpos = 0; //menu position

rotation = 0;

target = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.eyeEnabled {
    for(m = 0; m &lt; array_length_1d(menu); m+= 1)//writes text for every line in menu[]
    {
        if window_mouse_get_y() &gt; y+(m*space)-sprite_get_height(sprite_index)/2 and window_mouse_get_y() &lt; y+((m+1)*space)-sprite_get_height(sprite_index)/2 {
            mpos = m;
            break;
        }
    }
    if not(instance_exists(target)) {
        target = instance_create(x + 300, y + mpos*space, MenuInteractTarget);
    } else {
        target.y = y + mpos*space;
    }
} else {
    var move = 0;
    move -= max(keyboard_check_pressed(vk_up),keyboard_check_pressed(ord("W")),0);
    move += max(keyboard_check_pressed(vk_down),keyboard_check_pressed(ord("S")),0);
    
    if(move!=0) //Move the selector up/down. Make it cycle through the list.
    {
        mpos += move;
        if(mpos&lt;0)
        {
            mpos = array_length_1d(menu)-1;
        }
        if(mpos&gt;array_length_1d(menu)-1)
        {
            mpos = 0;
        }
    }
}
var push = 0; //check for confirmation key press
if global.eyeEnabled {
    if target.active {
        push = 1;
    }
} else {
    push = max(keyboard_check_pressed(vk_enter),keyboard_check_pressed(vk_space),0);
}

if(push == 1) //if pressed, go to whichever room you selected
{
    switch(mpos)
    {
        case 0:
        {
            room_goto(room0);
            break;
        }
        case 1:
        {
            room_goto(bossroom);
            break;
        }
        case 2:
        {
            room_goto(tutorial);
            break;
        }
        case 3:
        {
            
            break;
        }
        case 4:
        {
            game_end();
            break;
        }
        default:
        {
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(fMenu);
draw_set_color(c_white);

var m;
for(m = 0; m &lt; array_length_1d(menu); m+= 1)//writes text for every line in menu[]
{
    draw_text(x+space, y+(m*space),string(menu[m]));
}
draw_sprite(sprite_index, 0, x+16,y+(mpos*space)); //draws the selector at the proper mpos

draw_sprite_ext(sGear,0,512,100,1,1,rotation,c_white,1); //draws spinning gear
draw_sprite(sLogo,0,512,250);
rotation += 1 //makes the gear spin 2 degrees per step
if(rotation == 360)//makes sure it doesn't go above 360
    rotation = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
